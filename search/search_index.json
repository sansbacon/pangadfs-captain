{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"pangadfs-showdown pangadfs-showdown is a plugin that allows pangadfs to optimize \"showdown\" lineups. Here is a simple example of using pangadfs-showdown to optimize a DraftKings NFL lineup: TODO: fix this example from pathlib import Path from pangadfs import GeneticAlgorithm ctx = { 'ga_settings': { 'n_generations': 20, 'population_size': 5000, 'stop_criteria': 5, 'points_column': 'proj', 'salary_column': 'salary', 'position_column': 'pos', 'csvpth': Path(__file__).parent / 'pool.csv' }, 'site_settings': { 'salary_cap': 50000, 'posmap': {'DST': 1, 'QB': 1, 'RB': 2, 'WR': 3, 'TE': 1, 'FLEX': 7}, 'lineup_size': 9, 'posthresh': {'QB': 14, 'RB': 8, 'WR': 8, 'TE': 6, 'DST': 4, 'FLEX': 8} } } # set up GeneticAlgorithm object ga = GeneticAlgorithm(ctx=ctx) population, population_fitness = ga.optimize(verbose=True) player team pos salary proj 16 Giants NYG DST 3200 8.4 34 Patrick Mahomes KC QB 8000 26.6 62 Dalvin Cook MIN RB 9500 27.2 68 Nyheim Hines IND RB 4600 15.9 101 Kyle Rudolph MIN TE 2800 10.1 109 Gabriel Davis BUF WR 3000 10.7 138 Calvin Ridley ATL WR 7100 21.6 142 Justin Jefferson MIN WR 6300 20.0 149 Jakobi Meyers NE WR 5300 15.8 Lineup score: 156.3","title":"pangadfs-showdown"},{"location":"#pangadfs-showdown","text":"pangadfs-showdown is a plugin that allows pangadfs to optimize \"showdown\" lineups. Here is a simple example of using pangadfs-showdown to optimize a DraftKings NFL lineup: TODO: fix this example from pathlib import Path from pangadfs import GeneticAlgorithm ctx = { 'ga_settings': { 'n_generations': 20, 'population_size': 5000, 'stop_criteria': 5, 'points_column': 'proj', 'salary_column': 'salary', 'position_column': 'pos', 'csvpth': Path(__file__).parent / 'pool.csv' }, 'site_settings': { 'salary_cap': 50000, 'posmap': {'DST': 1, 'QB': 1, 'RB': 2, 'WR': 3, 'TE': 1, 'FLEX': 7}, 'lineup_size': 9, 'posthresh': {'QB': 14, 'RB': 8, 'WR': 8, 'TE': 6, 'DST': 4, 'FLEX': 8} } } # set up GeneticAlgorithm object ga = GeneticAlgorithm(ctx=ctx) population, population_fitness = ga.optimize(verbose=True) player team pos salary proj 16 Giants NYG DST 3200 8.4 34 Patrick Mahomes KC QB 8000 26.6 62 Dalvin Cook MIN RB 9500 27.2 68 Nyheim Hines IND RB 4600 15.9 101 Kyle Rudolph MIN TE 2800 10.1 109 Gabriel Davis BUF WR 3000 10.7 138 Calvin Ridley ATL WR 7100 21.6 142 Justin Jefferson MIN WR 6300 20.0 149 Jakobi Meyers NE WR 5300 15.8 Lineup score: 156.3","title":"pangadfs-showdown"},{"location":"building-apps/","text":"Building apps with pangadfs-showdown The default plugins for pangadfs will not gracefully handle \"Showdown\" (a/k/a \"Captain Mode\") contests on DraftKings. This section documents the development of pangadfs-showdown, a plugin that optimizes Showdown lineups. Plugin Namespaces The first step is to determine which plugin namespaces are required for your plugin. For pangadfs-showdown, def _showdown_sum(x: np.ndarray, mapping: Dict[int, Number]): class ShowdownPospool(PospoolBase): class ShowdownPopulate(PopulateDefault): class ShowdownFitness(FitnessBase): class ShowdownSalaryValidate(ValidateBase):","title":"Building Apps with pangadfs-showdown"},{"location":"building-apps/#building-apps-with-pangadfs-showdown","text":"The default plugins for pangadfs will not gracefully handle \"Showdown\" (a/k/a \"Captain Mode\") contests on DraftKings. This section documents the development of pangadfs-showdown, a plugin that optimizes Showdown lineups.","title":"Building apps with pangadfs-showdown"},{"location":"building-apps/#plugin-namespaces","text":"The first step is to determine which plugin namespaces are required for your plugin. For pangadfs-showdown, def _showdown_sum(x: np.ndarray, mapping: Dict[int, Number]): class ShowdownPospool(PospoolBase): class ShowdownPopulate(PopulateDefault): class ShowdownFitness(FitnessBase): class ShowdownSalaryValidate(ValidateBase):","title":"Plugin Namespaces"},{"location":"showdown-reference/","text":"ShowdownFitness fitness ( self , * , population , points , ** kwargs ) Assesses population fitness using supplied mapping Parameters: Name Type Description Default population ndarray the population to assess fitness required points ndarray projected points required Returns: Type Description ndarray np.ndarray: 1D array of float Source code in pangadfs_showdown/showdown.py def fitness ( self , * , population : np . ndarray , points : np . ndarray , ** kwargs ) -> np . ndarray : \"\"\"Assesses population fitness using supplied mapping Args: population (np.ndarray): the population to assess fitness points (np.ndarray): projected points Returns: np.ndarray: 1D array of float \"\"\" return np . apply_along_axis ( _showdown_sum , axis = 1 , arr = population , y = points ) ShowdownPopulate populate ( self , * , pospool , population_size , probcol = 'prob' , ** kwargs ) Creates individuals in population Parameters: Name Type Description Default pospool Dict[str, pandas.core.frame.DataFrame] pool split into positions required population_size int number of individuals to create required probcol str the dataframe column with probabilities 'prob' Returns: Type Description ndarray np.ndarray: array of size (population_size, 6) Source code in pangadfs_showdown/showdown.py def populate ( self , * , pospool : Dict [ str , pd . DataFrame ], population_size : int , probcol : str = 'prob' , ** kwargs ) -> np . ndarray : \"\"\"Creates individuals in population Args: pospool (Dict[str, DataFrame]): pool split into positions population_size (int): number of individuals to create probcol (str): the dataframe column with probabilities Returns: np.ndarray: array of size (population_size, 6) \"\"\" # multidimensional_shifting inherited from PopulateDefault return multidimensional_shifting ( elements = pospool . index , num_samples = population_size , sample_size = 6 , probs = pospool [ probcol ] ) ShowdownPospool pospool ( self , * , pool , posfilter , column_mapping , ** kwargs ) Creates initial position pool. Don't need duplicate players for CAPTAIN/FLEX. Will handle multiplier at the fitness and validate levels Parameters: Name Type Description Default pool DataFrame required posfilter float points threshold required column_mapping Dict[str, str] maps points, salary, and position column required Returns: Type Description DataFrame pd.DataFrame Source code in pangadfs_showdown/showdown.py def pospool ( self , * , pool : pd . DataFrame , posfilter : float , column_mapping : Dict [ str , str ], ** kwargs ) -> pd . DataFrame : \"\"\"Creates initial position pool. Don't need duplicate players for CAPTAIN/FLEX. Will handle multiplier at the fitness and validate levels Args: pool (pd.DataFrame): posfilter (float): points threshold column_mapping (Dict[str, str]): maps points, salary, and position column Returns: pd.DataFrame \"\"\" pointscol = column_mapping . get ( 'points' , 'proj' ) salcol = column_mapping . get ( 'salary' , 'salary' ) tmp = pool . loc [ pool [ pointscol ] >= posfilter , :] prob_ = ( tmp [ pointscol ] / tmp [ salcol ]) * 1000 prob_ = prob_ / prob_ . sum () return tmp . assign ( prob = prob_ ) ShowdownSalaryValidate validate ( self , * , population , salaries , salary_cap , ** kwargs ) Ensures valid individuals in population Source code in pangadfs_showdown/showdown.py def validate ( self , * , population : np . ndarray , salaries : np . ndarray , salary_cap : int , ** kwargs ) -> np . ndarray : \"\"\"Ensures valid individuals in population\"\"\" popsal = np . apply_along_axis ( _showdown_sum , axis = 1 , arr = population , y = salaries ) return population [ popsal <= salary_cap ]","title":"showdown"},{"location":"showdown-reference/#pangadfs_showdown.showdown","text":"","title":"pangadfs_showdown.showdown"},{"location":"showdown-reference/#pangadfs_showdown.showdown.ShowdownFitness","text":"","title":"ShowdownFitness"},{"location":"showdown-reference/#pangadfs_showdown.showdown.ShowdownFitness.fitness","text":"Assesses population fitness using supplied mapping Parameters: Name Type Description Default population ndarray the population to assess fitness required points ndarray projected points required Returns: Type Description ndarray np.ndarray: 1D array of float Source code in pangadfs_showdown/showdown.py def fitness ( self , * , population : np . ndarray , points : np . ndarray , ** kwargs ) -> np . ndarray : \"\"\"Assesses population fitness using supplied mapping Args: population (np.ndarray): the population to assess fitness points (np.ndarray): projected points Returns: np.ndarray: 1D array of float \"\"\" return np . apply_along_axis ( _showdown_sum , axis = 1 , arr = population , y = points )","title":"fitness()"},{"location":"showdown-reference/#pangadfs_showdown.showdown.ShowdownPopulate","text":"","title":"ShowdownPopulate"},{"location":"showdown-reference/#pangadfs_showdown.showdown.ShowdownPopulate.populate","text":"Creates individuals in population Parameters: Name Type Description Default pospool Dict[str, pandas.core.frame.DataFrame] pool split into positions required population_size int number of individuals to create required probcol str the dataframe column with probabilities 'prob' Returns: Type Description ndarray np.ndarray: array of size (population_size, 6) Source code in pangadfs_showdown/showdown.py def populate ( self , * , pospool : Dict [ str , pd . DataFrame ], population_size : int , probcol : str = 'prob' , ** kwargs ) -> np . ndarray : \"\"\"Creates individuals in population Args: pospool (Dict[str, DataFrame]): pool split into positions population_size (int): number of individuals to create probcol (str): the dataframe column with probabilities Returns: np.ndarray: array of size (population_size, 6) \"\"\" # multidimensional_shifting inherited from PopulateDefault return multidimensional_shifting ( elements = pospool . index , num_samples = population_size , sample_size = 6 , probs = pospool [ probcol ] )","title":"populate()"},{"location":"showdown-reference/#pangadfs_showdown.showdown.ShowdownPospool","text":"","title":"ShowdownPospool"},{"location":"showdown-reference/#pangadfs_showdown.showdown.ShowdownPospool.pospool","text":"Creates initial position pool. Don't need duplicate players for CAPTAIN/FLEX. Will handle multiplier at the fitness and validate levels Parameters: Name Type Description Default pool DataFrame required posfilter float points threshold required column_mapping Dict[str, str] maps points, salary, and position column required Returns: Type Description DataFrame pd.DataFrame Source code in pangadfs_showdown/showdown.py def pospool ( self , * , pool : pd . DataFrame , posfilter : float , column_mapping : Dict [ str , str ], ** kwargs ) -> pd . DataFrame : \"\"\"Creates initial position pool. Don't need duplicate players for CAPTAIN/FLEX. Will handle multiplier at the fitness and validate levels Args: pool (pd.DataFrame): posfilter (float): points threshold column_mapping (Dict[str, str]): maps points, salary, and position column Returns: pd.DataFrame \"\"\" pointscol = column_mapping . get ( 'points' , 'proj' ) salcol = column_mapping . get ( 'salary' , 'salary' ) tmp = pool . loc [ pool [ pointscol ] >= posfilter , :] prob_ = ( tmp [ pointscol ] / tmp [ salcol ]) * 1000 prob_ = prob_ / prob_ . sum () return tmp . assign ( prob = prob_ )","title":"pospool()"},{"location":"showdown-reference/#pangadfs_showdown.showdown.ShowdownSalaryValidate","text":"","title":"ShowdownSalaryValidate"},{"location":"showdown-reference/#pangadfs_showdown.showdown.ShowdownSalaryValidate.validate","text":"Ensures valid individuals in population Source code in pangadfs_showdown/showdown.py def validate ( self , * , population : np . ndarray , salaries : np . ndarray , salary_cap : int , ** kwargs ) -> np . ndarray : \"\"\"Ensures valid individuals in population\"\"\" popsal = np . apply_along_axis ( _showdown_sum , axis = 1 , arr = population , y = salaries ) return population [ popsal <= salary_cap ]","title":"validate()"}]}